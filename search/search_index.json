{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PICLE - Python Interactive Command Line Shells PICLE is a module to construct interactive command line shell applications. PICLE build on top of Python standard library CMD module and uses Pydantic models to construct shell environments. If the readline module is loaded ( pyreadline3 ), input will automatically inherit bash-like history-list editing (e.g. Control-P scrolls back to the last command, Control-N forward to the next one, Control-F moves the cursor to the right non-destructively, Control-B moves the cursor to the left non-destructively, etc.). Installation Install PICLE from PyPI using pip pip install picle Comparison With Other Projects python-nubia by Facebook - unfortunately this project no longer maintained, it also provides no integration with Pydantic. python-fire , click or argparse - all these libraries are great for building command line tools, but they provide no support for interactive shell or input validation supported by Pydantic. prompt-toolkit or textual - those are extremely good libraries for building Terminal User Interface (TUI) applications but they provide no support for interactive shell and Pydantic validation of input.","title":"Overview"},{"location":"#picle-python-interactive-command-line-shells","text":"PICLE is a module to construct interactive command line shell applications. PICLE build on top of Python standard library CMD module and uses Pydantic models to construct shell environments. If the readline module is loaded ( pyreadline3 ), input will automatically inherit bash-like history-list editing (e.g. Control-P scrolls back to the last command, Control-N forward to the next one, Control-F moves the cursor to the right non-destructively, Control-B moves the cursor to the left non-destructively, etc.).","title":"PICLE - Python Interactive Command Line Shells"},{"location":"#installation","text":"Install PICLE from PyPI using pip pip install picle","title":"Installation"},{"location":"#comparison-with-other-projects","text":"python-nubia by Facebook - unfortunately this project no longer maintained, it also provides no integration with Pydantic. python-fire , click or argparse - all these libraries are great for building command line tools, but they provide no support for interactive shell or input validation supported by Pydantic. prompt-toolkit or textual - those are extremely good libraries for building Terminal User Interface (TUI) applications but they provide no support for interactive shell and Pydantic validation of input.","title":"Comparison With Other Projects"},{"location":"Getting%20Started/","text":"Introducing PICLE Command-line interface (CLI) is the software interface used to interact with the system. From CLI you can run commands and receive output. The command-line interface usually includes lots of shortcuts and commands to get help, auto completion, argument choices and validation of input. PICLE creates structures of shell modes hierarchies, as illustrated in Figure 1. The hierarchy of each mode is made up of cascading branches of related commands and their functions. Root |-command -> Model |-command -> Field |-command -> Field |-command -> Field |-RUN Function |-command -> Function |-command -> Model |-Shell |-command -> Field |-command -> Model |-command -> Field |-RUN Function Figure 1. Sample shells hierarchy. Each shell has its own prompt and a set of commands. Commands parsed sequentially in the order they are inputted on the command line. Each command can point to one of: Pydantic model with or without shell A Pydantic model field with values to collect A function to run Each model may have a RUN function defined, this function executed with collected field values. Sample Application PICLE uses Pydantic models to construct interactive shells and their commands. For example, to create interactive shell that has this structure: Root |-show -> model_show |-version -> Function - output software version |-clock -> Function - display system time Can use code below: import time from picle import App from typing import Callable from pydantic import BaseModel, Field class model_show(BaseModel): version: Callable = Field(\"show_version\", description=\"Show software version\") clock: Callable = Field(\"show_clock\", description=\"Show current clock\") @staticmethod def show_version(): return \"0.1.0\" @staticmethod def show_clock(): return time.ctime() class Root(BaseModel): show: model_show = Field(None, description=\"Show commands\") class PicleConfig: prompt = \"picle#\" intro = \"PICLE Sample app\" if __name__ == \"__main__\": shell = App(Root) shell.start() Each Pydantic model can have PicleConfig subclass defined listing model configuration. Root -> show model field refers to model_show Pydantic model which has two fields version and clock each referring to callable function which is executed when user hits ENTER on the command line. Run above code with python myshellfile.py command and interact with the shell:","title":"Getting Started"},{"location":"Getting%20Started/#introducing-picle","text":"Command-line interface (CLI) is the software interface used to interact with the system. From CLI you can run commands and receive output. The command-line interface usually includes lots of shortcuts and commands to get help, auto completion, argument choices and validation of input. PICLE creates structures of shell modes hierarchies, as illustrated in Figure 1. The hierarchy of each mode is made up of cascading branches of related commands and their functions. Root |-command -> Model |-command -> Field |-command -> Field |-command -> Field |-RUN Function |-command -> Function |-command -> Model |-Shell |-command -> Field |-command -> Model |-command -> Field |-RUN Function Figure 1. Sample shells hierarchy. Each shell has its own prompt and a set of commands. Commands parsed sequentially in the order they are inputted on the command line. Each command can point to one of: Pydantic model with or without shell A Pydantic model field with values to collect A function to run Each model may have a RUN function defined, this function executed with collected field values.","title":"Introducing PICLE"},{"location":"Getting%20Started/#sample-application","text":"PICLE uses Pydantic models to construct interactive shells and their commands. For example, to create interactive shell that has this structure: Root |-show -> model_show |-version -> Function - output software version |-clock -> Function - display system time Can use code below: import time from picle import App from typing import Callable from pydantic import BaseModel, Field class model_show(BaseModel): version: Callable = Field(\"show_version\", description=\"Show software version\") clock: Callable = Field(\"show_clock\", description=\"Show current clock\") @staticmethod def show_version(): return \"0.1.0\" @staticmethod def show_clock(): return time.ctime() class Root(BaseModel): show: model_show = Field(None, description=\"Show commands\") class PicleConfig: prompt = \"picle#\" intro = \"PICLE Sample app\" if __name__ == \"__main__\": shell = App(Root) shell.start() Each Pydantic model can have PicleConfig subclass defined listing model configuration. Root -> show model field refers to model_show Pydantic model which has two fields version and clock each referring to callable function which is executed when user hits ENTER on the command line. Run above code with python myshellfile.py command and interact with the shell:","title":"Sample Application"},{"location":"api_reference/","text":"PICLE APIs Reference PICLE App picle . App ( root , stdin = None , stdout = None ) Bases: cmd . Cmd PICLE App class to construct shell. Parameters: root \u2013 Root/Top Pydantic model Source code in picle\\picle.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def __init__ ( self , root , stdin = None , stdout = None ): self . root = root self . shell = self . root . model_construct () self . shells = [ self . shell ] # extract configuration from shell model if hasattr ( self . shell , \"PicleConfig\" ): self . ruler = getattr ( self . shell . PicleConfig , \"ruler\" , self . ruler ) self . intro = getattr ( self . shell . PicleConfig , \"intro\" , self . intro ) self . prompt = getattr ( self . shell . PicleConfig , \"prompt\" , self . prompt ) self . newline = getattr ( self . shell . PicleConfig , \"newline\" , self . newline ) self . completekey = getattr ( self . shell . PicleConfig , \"completekey\" , self . completekey ) # mount override methods if hasattr ( self . shell . PicleConfig , \"methods_override\" ): for mount , override in self . shell . PicleConfig . methods_override . items (): setattr ( self , mount , getattr ( self . shell , override )) super ( App , self ) . __init__ ( stdin = stdin , stdout = stdout ) picle . picle . App . _save_collected_value ( field : dict , value : str ) -> None Helper function to save collected value into field values Parameters: field ( dict ) \u2013 field dictionary value ( str ) \u2013 value to save string Source code in picle\\picle.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 def _save_collected_value ( self , field : dict , value : str ) -> None : \"\"\" Helper function to save collected value into field values :param field: field dictionary :param value: value to save string \"\"\" # attempt to mutate value if isinstance ( value , str ): # convert value to boolean if value . title () == \"False\" : value = False elif value . title () == \"True\" : value = True elif value . title () == \"None\" : value = None # convert to integer elif value . isdigit (): value = int ( value ) # convert to float elif \".\" in value : try : value = float ( value ) except ValueError : pass # save single value if field [ \"values\" ] == ... : field [ \"values\" ] = value # add further values elif isinstance ( field [ \"values\" ], list ): field [ \"values\" ] . append ( value ) # transform values to a list if one value already collected else : field [ \"values\" ] = [ field . pop ( \"values\" ), value ] picle . picle . App . _validate_values ( models : list ) -> None Method to validate current model field values Source code in picle\\picle.py 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def _validate_values ( self , models : list ) -> None : \"\"\" Method to validate current model field values \"\"\" data = {} for model in reversed ( models [ 1 :]): kwargs = { f [ \"name\" ]: f [ \"values\" ] for f in model [ \"fields\" ] if f [ \"values\" ] is not ... } data = { model [ \"parameter\" ]: { ** data , ** kwargs }} log . debug ( f \"Validating collected data against root model, data: { data } \" ) # validate against root model if len ( self . shells ) == 1 : self . root ( ** data ) # validate against current shell model else : self . shell ( ** data ) picle . picle . App . completedefault ( text , line , begidx , endidx ) This method called for every command parameter on complete key hit except for the very first one. Source code in picle\\picle.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 def completedefault ( self , text , line , begidx , endidx ): \"\"\" This method called for every command parameter on complete key hit except for the very first one. \"\"\" fieldnames = [] try : command_models = self . parse_command ( line ) last_model = command_models [ - 1 ][ - 1 ][ \"model\" ] # check if last model has fields collected if command_models [ - 1 ][ - 1 ][ \"fields\" ]: last_field_name = command_models [ - 1 ][ - 1 ][ \"fields\" ][ - 1 ][ \"name\" ] last_field = last_model . model_fields [ last_field_name ] last_field_value = command_models [ - 1 ][ - 1 ][ \"fields\" ][ - 1 ][ \"values\" ] if isinstance ( last_field_value , list ): last_field_value = last_field_value [ - 1 ] elif last_field_value == ... : last_field_value = \"\" # check if need to extract enum values if isinstance ( last_field . annotation , enum . EnumMeta ): fieldnames = [ i . value for i in last_field . annotation if i . value . startswith ( last_field_value ) ] # check if model has method to source field choices elif hasattr ( last_model , f \"source_ { last_field_name } \" ): fieldnames = getattr ( last_model , f \"source_ { last_field_name } \" )() fieldnames = [ i for i in fieldnames if i . startswith ( last_field_value ) ] # return a list of all model fields else : fieldnames = list ( last_model . model_fields ) except FieldLooseMatchOnly as e : model , parameter = e . args fieldnames = [ f . alias or name for name , f in model [ \"model\" ] . model_fields . items () # skip fields with already collected values from complete prompt if name . startswith ( parameter ) and not any ( True for collected_field in model [ \"fields\" ] if collected_field [ \"name\" ] == name and collected_field [ \"values\" ] is not ... ) ] except FieldKeyError : pass except : tb = traceback . format_exc () self . write ( tb ) return sorted ( fieldnames ) picle . picle . App . completenames ( text , line , begidx , endidx ) This method only called for the very first command parameter on complete key hit. Source code in picle\\picle.py 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 def completenames ( self , text , line , begidx , endidx ): \"\"\" This method only called for the very first command parameter on complete key hit. \"\"\" fieldnames = [] # collect global methods for method_name in dir ( self ): if method_name . startswith ( \"do_\" ): name = method_name . replace ( \"do_\" , \"\" ) if name . startswith ( line ): fieldnames . append ( name ) # collect model arguments try : command_models = self . parse_command ( line ) fieldnames . extend ( command_models [ - 1 ][ - 1 ][ \"model\" ] . model_fields ) # collect arguments that startswith last parameter except FieldLooseMatchOnly as e : model , parameter = e . args for name , f in model [ \"model\" ] . model_fields . items (): if name . startswith ( parameter ): fieldnames . append ( name ) # raised if no model fields matched last parameter except FieldKeyError as e : pass return sorted ( fieldnames ) picle . picle . App . default ( line : str ) Method called if no do_xyz methods found Source code in picle\\picle.pydef default ( self , line : str ): \"\"\"Method called if no do_xyz methods found\"\"\" ret = False outputter = None # print help for given command or commands if line . strip () . endswith ( \"?\" ): try : command_models = self . parse_command ( line . strip () . rstrip ( \"?\" )) except FieldLooseMatchOnly as e : model , parameter = e . args self . print_model_help ( [[ model ]], verbose = True if line . strip () . endswith ( \"??\" ) else False , match = parameter , ) except FieldKeyError as e : model , parameter = e . args model_name = ( model [ \"model\" ] . __name__ if hasattr ( model [ \"model\" ], \"__name__\" ) else model [ \"model\" ] . __repr_name__ () ) self . write ( f \"Incorrect command, ' { parameter } ' not part of ' { model_name } ' model fields\" ) else : self . print_model_help ( command_models , verbose = True if line . strip () . endswith ( \"??\" ) else False , ) else : try : command_models = self . parse_command ( line , validate = True , add_default_values = True ) except FieldLooseMatchOnly as e : model , parameter = e . args # filter fields to return message for fields = [ f . alias or name for name , f in model [ \"model\" ] . model_fields . items () if name . startswith ( parameter ) ] self . write ( f \"Incomplete command, possible completions: \" f \" { ', ' . join ( fields ) } \" ) except FieldKeyError as e : model , parameter = e . args model_name = ( model [ \"model\" ] . __name__ if hasattr ( model [ \"model\" ], \"__name__\" ) else model [ \"model\" ] . __repr_name__ () ) self . write ( f \"Incorrect command, ' { parameter } ' not part of ' { model_name } ' model fields\" ) except ValidationError as e : self . write ( e ) else : # go over collected commands separated by pipe for index , command in enumerate ( command_models ): # collect arguments run_kwargs = { f [ \"name\" ]: f [ \"values\" ] for model in command for f in model [ \"fields\" ] if f [ \"values\" ] is not ... } # run model \"run\" function if it exits model = command [ - 1 ][ \"model\" ] if run_kwargs and hasattr ( model , \"run\" ): # call first command using collected arguments only if index == 0 : ret = model . run ( ** run_kwargs ) # pipe results through subsequent commands else : ret = model . run ( ret , ** run_kwargs ) # run processors from PicleConfig if any for first command only if index == 0 : if hasattr ( model , \"PicleConfig\" ) and hasattr ( model . PicleConfig , \"processors\" ): for processor in model . PicleConfig . processors : if callable ( processor ): ret = processor ( ret ) # extract outputter from PicleConfig if index == 0 : if hasattr ( model , \"PicleConfig\" ) and hasattr ( model . PicleConfig , \"outputter\" ): outputter = model . PicleConfig . outputter # check if model has subshell elif ( hasattr ( model , \"PicleConfig\" ) and getattr ( model . PicleConfig , \"subshell\" , None ) is True ): # collect parent shells for item in command [: - 1 ]: m = item [ \"model\" ] if ( hasattr ( m , \"PicleConfig\" ) and getattr ( m . PicleConfig , \"subshell\" , None ) is True ): if m not in self . shells : self . shells . append ( m ) # update prompt value self . prompt = getattr ( model . PicleConfig , \"prompt\" , self . prompt ) self . shell = model self . shells . append ( self . shell ) # run command via reference function elif command [ - 1 ][ \"fields\" ]: last_field_name = command [ - 1 ][ \"fields\" ][ - 1 ][ \"name\" ] last_field = model . model_fields [ last_field_name ] json_schema_extra = ( getattr ( last_field , \"json_schema_extra\" ) or {} ) # check if last field refers to callable e.g. function if last_field . annotation is Callable : method_name = last_field . get_default () if method_name and hasattr ( model , method_name ): # call first command using collected arguments only if index == 0 : ret = getattr ( model , method_name )( ** run_kwargs ) # pipe results through subsequent commands else : ret = getattr ( model , method_name )( ret , ** run_kwargs ) else : self . write ( f \"Model ' { model . __name__ } ' has no ' { method_name } ' \" f \"method defined for ' { last_field_name } ' Callable field\" ) # check if last field has `function` parameter defined elif json_schema_extra . get ( \"function\" ): method_name = json_schema_extra [ \"function\" ] if hasattr ( model , method_name ): # call first command using collected arguments only if index == 0 : ret = getattr ( model , method_name )( ** run_kwargs ) # pipe results through subsequent commands else : ret = getattr ( model , method_name )( ret , ** run_kwargs ) else : self . write ( f \"Model ' { model . __name__ } ' has no ' { method_name } ' \" f \"method defined for ' { last_field_name } ' function\" ) else : self . write ( f \"Model ' { model . __name__ } ' has no 'run' method defined\" ) # use processors from Field definition if any if json_schema_extra . get ( \"processors\" ): for processor in json_schema_extra [ \"processors\" ]: if callable ( processor ): ret = processor ( ret ) # run processors from PicleConfig if any for first command only if index == 0 : if hasattr ( model , \"PicleConfig\" ) and hasattr ( model . PicleConfig , \"processors\" ): for processor in model . PicleConfig . processors : if callable ( processor ): ret = processor ( ret ) # extract outputter from first command if index == 0 : # use outputter from Field definition if json_schema_extra . get ( \"outputter\" ): outputter = json_schema_extra [ \"outputter\" ] # use PicleConfig outputter elif hasattr ( model , \"PicleConfig\" ) and hasattr ( model . PicleConfig , \"outputter\" ): outputter = model . PicleConfig . outputter else : self . write ( f \"Incorrect command\" ) return # returning True will close the shell exit if ret is True : return True elif ret : # use specified outputter to output results if callable ( outputter ): outputter ( ret ) # write to stdout by default else : self . write ( ret ) picle . picle . App . do_end ( arg ) Exit application Source code in picle\\picle.py 514 515 516 def do_end ( self , arg ): \"\"\"Exit application\"\"\" return True picle . picle . App . do_exit ( arg ) Exit current shell Source code in picle\\picle.py 497 498 499 500 501 502 503 504 def do_exit ( self , arg ): \"\"\"Exit current shell\"\"\" _ = self . shells . pop ( - 1 ) if self . shells : self . shell = self . shells [ - 1 ] self . prompt = self . shell . PicleConfig . prompt else : return True picle . picle . App . do_help ( arg ) Print help message Source code in picle\\picle.py 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 def do_help ( self , arg ): \"\"\"Print help message\"\"\" command_models = self . parse_command ( arg . strip ( \"?\" )) self . print_model_help ( command_models , verbose = True if arg . strip () . endswith ( \"?\" ) else False ) # print help for global top commands if len ( arg . strip () . split ( \" \" )) == 1 : lines = {} # dict of {cmd: cmd_help} width = 0 # record longest command width for padding for method_name in dir ( self ): if method_name . startswith ( \"do_\" ): name = method_name . replace ( \"do_\" , \"\" ) lines [ name ] = getattr ( self , method_name ) . __doc__ width = max ( width , len ( name )) # form help lines if lines : help_msg = [] for k , v in lines . items (): padding = \" \" * ( width - len ( k )) + ( \" \" * 4 ) help_msg . append ( f \" { k }{ padding }{ v } \" ) # print help message self . write ( self . newline . join ( help_msg )) picle . picle . App . do_pwd ( arg ) Print current shell path Source code in picle\\picle.py 518 519 520 521 522 523 def do_pwd ( self , arg ): \"\"\"Print current shell path\"\"\" path = [ \"Root\" ] for shell in self . shells [ 1 :]: path . append ( shell . __name__ ) self . write ( \"->\" . join ( path )) picle . picle . App . do_top ( arg ) Exit to top shell Source code in picle\\picle.py 506 507 508 509 510 511 512 def do_top ( self , arg ): \"\"\"Exit to top shell\"\"\" self . shell = self . shells [ 0 ] self . prompt = self . shell . PicleConfig . prompt while self . shells : _ = self . shells . pop () self . shells . append ( self . shell ) picle . picle . App . emptyline () -> None Override empty line method to not run last command Source code in picle\\picle.py 83 84 85 def emptyline ( self ) -> None : \"\"\"Override empty line method to not run last command\"\"\" return None picle . picle . App . parse_command ( command : str , validate : bool = False , add_default_values : bool = False ) -> list Function to parse command string and construct list of model references and fields values. Parameters: command ( str ) \u2013 command string Returns a list of lists of dictionaries with collected models details each dictionary containing model , fields and parameter keys. Source code in picle\\picle.pydef parse_command ( self , command : str , validate : bool = False , add_default_values : bool = False ) -> list : \"\"\" Function to parse command string and construct list of model references and fields values. :param command: command string Returns a list of lists of dictionaries with collected models details each dictionary containing ``model``, ``fields`` and ``parameter`` keys. \"\"\" current_model = { \"model\" : self . shell , \"fields\" : [], \"parameter\" : ... } current_field = {} models = [ current_model ] parameters = [ i for i in command . split ( \" \" ) if i . strip ()] pipe_models = None ret = [ models ] # iterate over command parameters and decide if its a reference # to a model or model's field value while parameters : parameter = parameters . pop ( 0 ) # handle pipe - \"|\" if parameter == \"|\" : # check if current model has pipe defined if hasattr ( current_model [ \"model\" ], \"PicleConfig\" ) and getattr ( current_model [ \"model\" ] . PicleConfig , \"pipe\" , None ): if current_model [ \"model\" ] . PicleConfig . pipe == \"self\" : # reference pipe model to current model current_model = { \"model\" : current_model [ \"model\" ], \"fields\" : [], \"parameter\" : parameter , } else : # goto pipe model current_model = { \"model\" : current_model [ \"model\" ] . PicleConfig . pipe , \"fields\" : [], \"parameter\" : parameter , } models = [ current_model ] ret . append ( models ) else : raise SyntaxError ( f \"' { current_model [ 'model' ] } ' does not support pipe handling\" ) # collect single quoted field value elif '\"' in parameter and current_field : value_items = [ parameter . replace ( '\"' , \"\" )] # collect further values if first parameter not double quoted value e.g. \"nrp1\" if parameter . count ( '\"' ) != 2 : while parameters : parameter = parameters . pop ( 0 ) value_items . append ( parameter . replace ( '\"' , \"\" )) if '\"' in parameter : break value = \" \" . join ( value_items ) # form value string self . _save_collected_value ( current_field , value ) # handle reference to model elif current_model [ \"model\" ] . model_fields . get ( parameter ) or any ( parameter == f . alias for f in current_model [ \"model\" ] . model_fields . values () ): # source field by name if current_model [ \"model\" ] . model_fields . get ( parameter ): field = current_model [ \"model\" ] . model_fields [ parameter ] else : # source field by alias for f_name , field in current_model [ \"model\" ] . model_fields . items (): if parameter == field . alias : parameter = f_name # use actual field name break # handle next level model reference if isinstance ( field . annotation , ModelMetaclass ): # goto next model current_model = { \"model\" : field . annotation , \"fields\" : [], \"parameter\" : parameter , } models . append ( current_model ) current_field = {} # empty current field # extract default values from the current model if add_default_values : for f_name , f_value in current_model [ \"model\" ] . model_fields . items (): # skip references to other models if not isinstance ( f_value , FieldInfo ): continue # skip references to callables if f_value . annotation is Callable : continue # add field default value if f_value . get_default () is not None : current_model [ \"fields\" ] . append ( { \"name\" : f_name , \"values\" : f_value . get_default ()} ) # handle actual field reference elif isinstance ( field , FieldInfo ): # check need to record field presence before going to next field if ( current_field . get ( \"values\" ) is ... and current_field [ \"field\" ] . json_schema_extra is not None and \"presence\" in current_field [ \"field\" ] . json_schema_extra ): value = current_field [ \"field\" ] . json_schema_extra [ \"presence\" ] self . _save_collected_value ( current_field , value ) # goto next field current_field = { \"name\" : parameter , \"values\" : ... , \"field\" : field } # find and replace default value if present for index , field in enumerate ( current_model [ \"fields\" ]): if field [ \"name\" ] == current_field [ \"name\" ]: current_model [ \"fields\" ][ index ] = current_field break else : current_model [ \"fields\" ] . append ( current_field ) else : raise TypeError ( f \"Unsupported pydantic field type: ' { type ( field . annotation ) } ', \" f \"parameter: ' { parameter } ', command: ' { command } ', current model: \" f \"' { current_model [ 'model' ] } '\" ) # check if parameter value partially matches any of the model fields elif any ( field . startswith ( parameter ) for field in current_model [ \"model\" ] . model_fields ): raise FieldLooseMatchOnly ( current_model , parameter ) # parameter is a value, save it to current model elif current_field : self . _save_collected_value ( current_field , parameter ) else : raise FieldKeyError ( current_model , parameter ) # check presence for last parameter if ( current_field . get ( \"values\" ) is ... and current_field [ \"field\" ] . json_schema_extra is not None and \"presence\" in current_field [ \"field\" ] . json_schema_extra ): value = current_field [ \"field\" ] . json_schema_extra [ \"presence\" ] self . _save_collected_value ( current_field , value ) # validated collected values if validate : self . _validate_values ( models ) return ret picle . picle . App . print_model_help ( models : list , verbose : bool = False , match : str = None ) -> None Function to form and print help message for model fields. Parameters: match ( str ) \u2013 only collect help for fields that start with match string Source code in picle\\picle.py 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 def print_model_help ( self , models : list , verbose : bool = False , match : str = None ) -> None : \"\"\" Function to form and print help message for model fields. :param match: only collect help for fields that start with ``match`` string \"\"\" model = models [ - 1 ][ - 1 ] # get last model last_field = model [ \"fields\" ][ - 1 ] if model [ \"fields\" ] else None lines = {} # dict of {cmd: cmd_help} width = 0 # record longest command width for padding # print help message only for last collected field if last_field and last_field [ \"values\" ] == ... : field = model [ \"model\" ] . model_fields [ last_field [ \"name\" ]] name = f \"<' { last_field [ 'name' ] } ' value>\" # check if field is callable if field . annotation is Callable : name = \"<ENTER>\" lines [ name ] = \"Execute command\" width = max ( width , len ( name )) # add options for enumerations elif isinstance ( field . annotation , enum . EnumMeta ): options = [ i . value for i in field . annotation ] lines [ name ] = \", \" . join ( options ) # check if model has method to source field choices elif hasattr ( model [ \"model\" ], f \"source_ { last_field [ 'name' ] } \" ): options = getattr ( model [ \"model\" ], f \"source_ { last_field [ 'name' ] } \" )() lines [ name ] = \", \" . join ( options ) else : lines [ name ] = f \" { field . description } \" if verbose : lines [ name ] += ( f \"; default ' { field . get_default () } ', type ' { str ( field . annotation ) } ', \" f \"is required - { field . is_required () } \" ) # collect help message for all fields of this model else : # check if model supports subshell if ( hasattr ( model [ \"model\" ], \"PicleConfig\" ) and getattr ( model [ \"model\" ] . PicleConfig , \"subshell\" , None ) is True # exclude <ENTER> if already in model's shell and not self . shells [ - 1 ] == model [ \"model\" ] ): name = \"<ENTER>\" lines [ name ] = \"Enter command subshell\" width = max ( width , len ( name )) # iterate over model fields for name , field in model [ \"model\" ] . model_fields . items (): # check if field has alias if field . alias : name = field . alias # skip fields that already have values if any ( f [ \"name\" ] == name for f in model [ \"fields\" ]): continue # filter fields if match and not name . startswith ( match ): continue lines [ name ] = f \" { field . description } \" if verbose : lines [ name ] += ( f \"; default ' { field . get_default () } ', type ' { str ( field . annotation ) } ', \" f \"is required - { field . is_required () } \" ) width = max ( width , len ( name )) # check if model has pipe defined if hasattr ( model [ \"model\" ], \"PicleConfig\" ) and getattr ( model [ \"model\" ] . PicleConfig , \"pipe\" , None ): name = \"|\" lines [ name ] = \"Execute pipe command\" width = max ( width , len ( name )) width = max ( width , len ( name )) # form help lines help_msg = [] for k in sorted ( lines . keys ()): padding = \" \" * ( width - len ( k )) + ( \" \" * 4 ) help_msg . append ( f \" { k }{ padding }{ lines [ k ] } \" ) # print help message self . write ( self . newline . join ( help_msg )) picle . picle . App . write ( text : str ) -> None Method to write output to stdout Parameters: text ( str ) \u2013 text output Source code in picle\\picle.py 87 88 89 90 91 92 93 94 95 96 97 98 def write ( self , text : str ) -> None : \"\"\" Method to write output to stdout :param text: text output \"\"\" if not isinstance ( text , str ): text = str ( text ) if not text . endswith ( self . newline ): self . stdout . write ( text + self . newline ) else : self . stdout . write ( text ) PicleConfig Each Pydantic model can have PicleConfig subclass defined with model configuration parameters: ruler - The character used to draw separator lines under the help-message headers. If empty, no ruler line is drawn, defaults is empty intro - A string to issue as an intro or banner prompt - command line shell prompt newline - newline character to use while printing output, default is \\r\\n completekey - is the readline name of a completion key, defaults to tab pipe - reference to Pydantic model class to use with | (pipe) to process the results with various functions, special value pipe = \"self\" instruct to use current model for piping results through. processors - list of functions to run results of first command through one by one outputter - function to output results, by default results written to stdout Sample PicleConfig definition: from picle.models import PipeFunctionsModel, Formatters, Outputters class ShellModel(BaseModel): \"\"\" define command attributes here \"\"\" <...> class PicleConfig: prompt = \"picle#\" ruler = \"\" intro = \"PICLE Sample app\" newline = \"\\r\\n\" completekey = \"tab\" pipe = PipeFunctionsModel processors = [Formatters.formatter_json] outputter = Outputters.outputter_rich_print Field json_schema_extra PICLE supports reading additional parameters from model Field's json_schema_extra definition to control PICLE behavior. json_schema_extra PICLE parameters: function - refers to @staticmethod of the model to call with command arguments presence - command argument set to presence value if command given processors - list of functions to run results of each command through one by one outputter - function to output results, by default results written to stdout, Field's outputter overrides PicleConfig's outputter Field processors Processors allow to pass command execution results through a list of arbitrary functions. Results returned by processor function passed on as input to next processor function in the list and so on. In example below results returned by produce_structured_data function passed through pprint formatter Formatters.formatter_pprint function to produce pretty formatted string. from picle.models import Formatters class model_show(BaseModel): data_pprint: Callable = Field( \"produce_structured_data\", description=\"Show data using pprint formatter\", json_schema_extra={ \"processors\": [ Formatters.formatter_pprint ] } ) @staticmethod def produce_structured_data(): return {\"some\": {\"dictionary\": {\"data\": None}}, \"more\": {\"dictionary\": [\"data\"]}, \"even\": {\"more\": {\"dictionary\": \"data\"}}} PICLE Build In Models picle.models.Filters Bases: BaseModel picle . models . Filters . filter_exclude ( data : Any , exclude : Any = None ) -> str staticmethod Filter data line by line using provided pattern. Returns only lines that does not contains requested exclude pattern. Parameters: data ( Any ) \u2013 data to filter exclude ( Any ) \u2013 pattern to filter data Source code in picle\\models.py 49 50 51 52 53 54 55 56 57 58 59 60 61 @staticmethod def filter_exclude ( data : Any , exclude : Any = None ) -> str : \"\"\" Filter data line by line using provided pattern. Returns only lines that does not contains requested ``exclude`` pattern. :param data: data to filter :param exclude: pattern to filter data \"\"\" exclude = str ( exclude ) return \" \\n \" . join ( [ line for line in str ( data ) . splitlines () if exclude not in line ] ) picle . models . Filters . filter_include ( data : Any , include : Any = None ) -> str staticmethod Filter data line by line using provided pattern. Returns only lines that contains requested include pattern. Parameters: data ( Any ) \u2013 data to filter include ( Any ) \u2013 pattern to filter data Source code in picle\\models.py 37 38 39 40 41 42 43 44 45 46 47 @staticmethod def filter_include ( data : Any , include : Any = None ) -> str : \"\"\" Filter data line by line using provided pattern. Returns only lines that contains requested ``include`` pattern. :param data: data to filter :param include: pattern to filter data \"\"\" include = str ( include ) return \" \\n \" . join ([ line for line in str ( data ) . splitlines () if include in line ]) picle.models.Formatters Bases: BaseModel picle . models . Formatters . formatter_json ( data : Any ) -> str staticmethod Function to transform results into JSON string Parameters: data ( Any ) \u2013 any data to convert Source code in picle\\models.py 91 92 93 94 95 96 97 98 @staticmethod def formatter_json ( data : Any ) -> str : \"\"\" Function to transform results into JSON string :param data: any data to convert \"\"\" return json . dumps ( data , indent = 4 , sort_keys = True ) picle . models . Formatters . formatter_pprint ( data : Any ) -> str staticmethod Function to pretty print results using python pprint module Parameters: data ( Any ) \u2013 any data to pretty print Source code in picle\\models.py 82 83 84 85 86 87 88 89 @staticmethod def formatter_pprint ( data : Any ) -> str : \"\"\" Function to pretty print results using python ``pprint`` module :param data: any data to pretty print \"\"\" return pprint . pformat ( data , indent = 4 ) picle . models . Formatters . formatter_yaml ( data : Any ) -> str staticmethod Function to transform results into YAML string Parameters: data ( Any ) \u2013 any data to convert Source code in picle\\models.py 100 101 102 103 104 105 106 107 108 109 110 @staticmethod def formatter_yaml ( data : Any ) -> str : \"\"\" Function to transform results into YAML string :param data: any data to convert \"\"\" if HAS_YAML : return yaml_dump ( data , default_flow_style = False ) else : return data picle.models.Outputters Bases: BaseModel picle . models . Outputters . outputter_rich_json ( data : Union [ dict , list ]) -> None staticmethod Function to pretty print JSON string using Rich library Parameters: data ( Union [ dict , list ] ) \u2013 any data to print Source code in picle\\models.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 @staticmethod def outputter_rich_json ( data : Union [ dict , list ]) -> None : \"\"\" Function to pretty print JSON string using Rich library :param data: any data to print \"\"\" if isinstance ( data , bytes ): data = data . decode ( \"utf-8\" ) if not isinstance ( data , str ): data = json . dumps ( data ) # data should be a json string try : if HAS_RICH : RICHCONSOLE . print_json ( data , sort_keys = True , indent = 4 ) else : print ( data ) except Exception as e : print ( f \"ERROR: Data is not a valid JSON string: ' { data } ', error: ' { e } '\" ) picle . models . Outputters . outputter_rich_print ( data : Any ) -> None staticmethod Function to pretty print output using Rich library Parameters: data ( Any ) \u2013 any data to print Source code in picle\\models.py 147 148 149 150 151 152 153 154 155 156 157 @staticmethod def outputter_rich_print ( data : Any ) -> None : \"\"\" Function to pretty print output using Rich library :param data: any data to print \"\"\" if HAS_RICH : RICHCONSOLE . print ( data ) else : print ( data ) picle.models.PipeFunctionsModel Bases: Filters , Formatters , Outputters Collection of common pipe functions to use in PICLE shell models","title":"API Reference"},{"location":"api_reference/#picle-apis-reference","text":"","title":"PICLE APIs Reference"},{"location":"api_reference/#picle-app","text":"","title":"PICLE App"},{"location":"api_reference/#picle.App","text":"Bases: cmd . Cmd PICLE App class to construct shell. Parameters: root \u2013 Root/Top Pydantic model Source code in picle\\picle.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 def __init__ ( self , root , stdin = None , stdout = None ): self . root = root self . shell = self . root . model_construct () self . shells = [ self . shell ] # extract configuration from shell model if hasattr ( self . shell , \"PicleConfig\" ): self . ruler = getattr ( self . shell . PicleConfig , \"ruler\" , self . ruler ) self . intro = getattr ( self . shell . PicleConfig , \"intro\" , self . intro ) self . prompt = getattr ( self . shell . PicleConfig , \"prompt\" , self . prompt ) self . newline = getattr ( self . shell . PicleConfig , \"newline\" , self . newline ) self . completekey = getattr ( self . shell . PicleConfig , \"completekey\" , self . completekey ) # mount override methods if hasattr ( self . shell . PicleConfig , \"methods_override\" ): for mount , override in self . shell . PicleConfig . methods_override . items (): setattr ( self , mount , getattr ( self . shell , override )) super ( App , self ) . __init__ ( stdin = stdin , stdout = stdout )","title":"App"},{"location":"api_reference/#picle.picle.App._save_collected_value","text":"Helper function to save collected value into field values Parameters: field ( dict ) \u2013 field dictionary value ( str ) \u2013 value to save string Source code in picle\\picle.py 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 def _save_collected_value ( self , field : dict , value : str ) -> None : \"\"\" Helper function to save collected value into field values :param field: field dictionary :param value: value to save string \"\"\" # attempt to mutate value if isinstance ( value , str ): # convert value to boolean if value . title () == \"False\" : value = False elif value . title () == \"True\" : value = True elif value . title () == \"None\" : value = None # convert to integer elif value . isdigit (): value = int ( value ) # convert to float elif \".\" in value : try : value = float ( value ) except ValueError : pass # save single value if field [ \"values\" ] == ... : field [ \"values\" ] = value # add further values elif isinstance ( field [ \"values\" ], list ): field [ \"values\" ] . append ( value ) # transform values to a list if one value already collected else : field [ \"values\" ] = [ field . pop ( \"values\" ), value ]","title":"_save_collected_value()"},{"location":"api_reference/#picle.picle.App._validate_values","text":"Method to validate current model field values Source code in picle\\picle.py 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 def _validate_values ( self , models : list ) -> None : \"\"\" Method to validate current model field values \"\"\" data = {} for model in reversed ( models [ 1 :]): kwargs = { f [ \"name\" ]: f [ \"values\" ] for f in model [ \"fields\" ] if f [ \"values\" ] is not ... } data = { model [ \"parameter\" ]: { ** data , ** kwargs }} log . debug ( f \"Validating collected data against root model, data: { data } \" ) # validate against root model if len ( self . shells ) == 1 : self . root ( ** data ) # validate against current shell model else : self . shell ( ** data )","title":"_validate_values()"},{"location":"api_reference/#picle.picle.App.completedefault","text":"This method called for every command parameter on complete key hit except for the very first one. Source code in picle\\picle.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 def completedefault ( self , text , line , begidx , endidx ): \"\"\" This method called for every command parameter on complete key hit except for the very first one. \"\"\" fieldnames = [] try : command_models = self . parse_command ( line ) last_model = command_models [ - 1 ][ - 1 ][ \"model\" ] # check if last model has fields collected if command_models [ - 1 ][ - 1 ][ \"fields\" ]: last_field_name = command_models [ - 1 ][ - 1 ][ \"fields\" ][ - 1 ][ \"name\" ] last_field = last_model . model_fields [ last_field_name ] last_field_value = command_models [ - 1 ][ - 1 ][ \"fields\" ][ - 1 ][ \"values\" ] if isinstance ( last_field_value , list ): last_field_value = last_field_value [ - 1 ] elif last_field_value == ... : last_field_value = \"\" # check if need to extract enum values if isinstance ( last_field . annotation , enum . EnumMeta ): fieldnames = [ i . value for i in last_field . annotation if i . value . startswith ( last_field_value ) ] # check if model has method to source field choices elif hasattr ( last_model , f \"source_ { last_field_name } \" ): fieldnames = getattr ( last_model , f \"source_ { last_field_name } \" )() fieldnames = [ i for i in fieldnames if i . startswith ( last_field_value ) ] # return a list of all model fields else : fieldnames = list ( last_model . model_fields ) except FieldLooseMatchOnly as e : model , parameter = e . args fieldnames = [ f . alias or name for name , f in model [ \"model\" ] . model_fields . items () # skip fields with already collected values from complete prompt if name . startswith ( parameter ) and not any ( True for collected_field in model [ \"fields\" ] if collected_field [ \"name\" ] == name and collected_field [ \"values\" ] is not ... ) ] except FieldKeyError : pass except : tb = traceback . format_exc () self . write ( tb ) return sorted ( fieldnames )","title":"completedefault()"},{"location":"api_reference/#picle.picle.App.completenames","text":"This method only called for the very first command parameter on complete key hit. Source code in picle\\picle.py 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 def completenames ( self , text , line , begidx , endidx ): \"\"\" This method only called for the very first command parameter on complete key hit. \"\"\" fieldnames = [] # collect global methods for method_name in dir ( self ): if method_name . startswith ( \"do_\" ): name = method_name . replace ( \"do_\" , \"\" ) if name . startswith ( line ): fieldnames . append ( name ) # collect model arguments try : command_models = self . parse_command ( line ) fieldnames . extend ( command_models [ - 1 ][ - 1 ][ \"model\" ] . model_fields ) # collect arguments that startswith last parameter except FieldLooseMatchOnly as e : model , parameter = e . args for name , f in model [ \"model\" ] . model_fields . items (): if name . startswith ( parameter ): fieldnames . append ( name ) # raised if no model fields matched last parameter except FieldKeyError as e : pass return sorted ( fieldnames )","title":"completenames()"},{"location":"api_reference/#picle.picle.App.default","text":"Method called if no do_xyz methods found Source code in picle\\picle.pydef default ( self , line : str ): \"\"\"Method called if no do_xyz methods found\"\"\" ret = False outputter = None # print help for given command or commands if line . strip () . endswith ( \"?\" ): try : command_models = self . parse_command ( line . strip () . rstrip ( \"?\" )) except FieldLooseMatchOnly as e : model , parameter = e . args self . print_model_help ( [[ model ]], verbose = True if line . strip () . endswith ( \"??\" ) else False , match = parameter , ) except FieldKeyError as e : model , parameter = e . args model_name = ( model [ \"model\" ] . __name__ if hasattr ( model [ \"model\" ], \"__name__\" ) else model [ \"model\" ] . __repr_name__ () ) self . write ( f \"Incorrect command, ' { parameter } ' not part of ' { model_name } ' model fields\" ) else : self . print_model_help ( command_models , verbose = True if line . strip () . endswith ( \"??\" ) else False , ) else : try : command_models = self . parse_command ( line , validate = True , add_default_values = True ) except FieldLooseMatchOnly as e : model , parameter = e . args # filter fields to return message for fields = [ f . alias or name for name , f in model [ \"model\" ] . model_fields . items () if name . startswith ( parameter ) ] self . write ( f \"Incomplete command, possible completions: \" f \" { ', ' . join ( fields ) } \" ) except FieldKeyError as e : model , parameter = e . args model_name = ( model [ \"model\" ] . __name__ if hasattr ( model [ \"model\" ], \"__name__\" ) else model [ \"model\" ] . __repr_name__ () ) self . write ( f \"Incorrect command, ' { parameter } ' not part of ' { model_name } ' model fields\" ) except ValidationError as e : self . write ( e ) else : # go over collected commands separated by pipe for index , command in enumerate ( command_models ): # collect arguments run_kwargs = { f [ \"name\" ]: f [ \"values\" ] for model in command for f in model [ \"fields\" ] if f [ \"values\" ] is not ... } # run model \"run\" function if it exits model = command [ - 1 ][ \"model\" ] if run_kwargs and hasattr ( model , \"run\" ): # call first command using collected arguments only if index == 0 : ret = model . run ( ** run_kwargs ) # pipe results through subsequent commands else : ret = model . run ( ret , ** run_kwargs ) # run processors from PicleConfig if any for first command only if index == 0 : if hasattr ( model , \"PicleConfig\" ) and hasattr ( model . PicleConfig , \"processors\" ): for processor in model . PicleConfig . processors : if callable ( processor ): ret = processor ( ret ) # extract outputter from PicleConfig if index == 0 : if hasattr ( model , \"PicleConfig\" ) and hasattr ( model . PicleConfig , \"outputter\" ): outputter = model . PicleConfig . outputter # check if model has subshell elif ( hasattr ( model , \"PicleConfig\" ) and getattr ( model . PicleConfig , \"subshell\" , None ) is True ): # collect parent shells for item in command [: - 1 ]: m = item [ \"model\" ] if ( hasattr ( m , \"PicleConfig\" ) and getattr ( m . PicleConfig , \"subshell\" , None ) is True ): if m not in self . shells : self . shells . append ( m ) # update prompt value self . prompt = getattr ( model . PicleConfig , \"prompt\" , self . prompt ) self . shell = model self . shells . append ( self . shell ) # run command via reference function elif command [ - 1 ][ \"fields\" ]: last_field_name = command [ - 1 ][ \"fields\" ][ - 1 ][ \"name\" ] last_field = model . model_fields [ last_field_name ] json_schema_extra = ( getattr ( last_field , \"json_schema_extra\" ) or {} ) # check if last field refers to callable e.g. function if last_field . annotation is Callable : method_name = last_field . get_default () if method_name and hasattr ( model , method_name ): # call first command using collected arguments only if index == 0 : ret = getattr ( model , method_name )( ** run_kwargs ) # pipe results through subsequent commands else : ret = getattr ( model , method_name )( ret , ** run_kwargs ) else : self . write ( f \"Model ' { model . __name__ } ' has no ' { method_name } ' \" f \"method defined for ' { last_field_name } ' Callable field\" ) # check if last field has `function` parameter defined elif json_schema_extra . get ( \"function\" ): method_name = json_schema_extra [ \"function\" ] if hasattr ( model , method_name ): # call first command using collected arguments only if index == 0 : ret = getattr ( model , method_name )( ** run_kwargs ) # pipe results through subsequent commands else : ret = getattr ( model , method_name )( ret , ** run_kwargs ) else : self . write ( f \"Model ' { model . __name__ } ' has no ' { method_name } ' \" f \"method defined for ' { last_field_name } ' function\" ) else : self . write ( f \"Model ' { model . __name__ } ' has no 'run' method defined\" ) # use processors from Field definition if any if json_schema_extra . get ( \"processors\" ): for processor in json_schema_extra [ \"processors\" ]: if callable ( processor ): ret = processor ( ret ) # run processors from PicleConfig if any for first command only if index == 0 : if hasattr ( model , \"PicleConfig\" ) and hasattr ( model . PicleConfig , \"processors\" ): for processor in model . PicleConfig . processors : if callable ( processor ): ret = processor ( ret ) # extract outputter from first command if index == 0 : # use outputter from Field definition if json_schema_extra . get ( \"outputter\" ): outputter = json_schema_extra [ \"outputter\" ] # use PicleConfig outputter elif hasattr ( model , \"PicleConfig\" ) and hasattr ( model . PicleConfig , \"outputter\" ): outputter = model . PicleConfig . outputter else : self . write ( f \"Incorrect command\" ) return # returning True will close the shell exit if ret is True : return True elif ret : # use specified outputter to output results if callable ( outputter ): outputter ( ret ) # write to stdout by default else : self . write ( ret )","title":"default()"},{"location":"api_reference/#picle.picle.App.do_end","text":"Exit application Source code in picle\\picle.py 514 515 516 def do_end ( self , arg ): \"\"\"Exit application\"\"\" return True","title":"do_end()"},{"location":"api_reference/#picle.picle.App.do_exit","text":"Exit current shell Source code in picle\\picle.py 497 498 499 500 501 502 503 504 def do_exit ( self , arg ): \"\"\"Exit current shell\"\"\" _ = self . shells . pop ( - 1 ) if self . shells : self . shell = self . shells [ - 1 ] self . prompt = self . shell . PicleConfig . prompt else : return True","title":"do_exit()"},{"location":"api_reference/#picle.picle.App.do_help","text":"Print help message Source code in picle\\picle.py 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 def do_help ( self , arg ): \"\"\"Print help message\"\"\" command_models = self . parse_command ( arg . strip ( \"?\" )) self . print_model_help ( command_models , verbose = True if arg . strip () . endswith ( \"?\" ) else False ) # print help for global top commands if len ( arg . strip () . split ( \" \" )) == 1 : lines = {} # dict of {cmd: cmd_help} width = 0 # record longest command width for padding for method_name in dir ( self ): if method_name . startswith ( \"do_\" ): name = method_name . replace ( \"do_\" , \"\" ) lines [ name ] = getattr ( self , method_name ) . __doc__ width = max ( width , len ( name )) # form help lines if lines : help_msg = [] for k , v in lines . items (): padding = \" \" * ( width - len ( k )) + ( \" \" * 4 ) help_msg . append ( f \" { k }{ padding }{ v } \" ) # print help message self . write ( self . newline . join ( help_msg ))","title":"do_help()"},{"location":"api_reference/#picle.picle.App.do_pwd","text":"Print current shell path Source code in picle\\picle.py 518 519 520 521 522 523 def do_pwd ( self , arg ): \"\"\"Print current shell path\"\"\" path = [ \"Root\" ] for shell in self . shells [ 1 :]: path . append ( shell . __name__ ) self . write ( \"->\" . join ( path ))","title":"do_pwd()"},{"location":"api_reference/#picle.picle.App.do_top","text":"Exit to top shell Source code in picle\\picle.py 506 507 508 509 510 511 512 def do_top ( self , arg ): \"\"\"Exit to top shell\"\"\" self . shell = self . shells [ 0 ] self . prompt = self . shell . PicleConfig . prompt while self . shells : _ = self . shells . pop () self . shells . append ( self . shell )","title":"do_top()"},{"location":"api_reference/#picle.picle.App.emptyline","text":"Override empty line method to not run last command Source code in picle\\picle.py 83 84 85 def emptyline ( self ) -> None : \"\"\"Override empty line method to not run last command\"\"\" return None","title":"emptyline()"},{"location":"api_reference/#picle.picle.App.parse_command","text":"Function to parse command string and construct list of model references and fields values. Parameters: command ( str ) \u2013 command string Returns a list of lists of dictionaries with collected models details each dictionary containing model , fields and parameter keys. Source code in picle\\picle.py 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 def parse_command ( self , command : str , validate : bool = False , add_default_values : bool = False ) -> list : \"\"\" Function to parse command string and construct list of model references and fields values. :param command: command string Returns a list of lists of dictionaries with collected models details each dictionary containing ``model``, ``fields`` and ``parameter`` keys. \"\"\" current_model = { \"model\" : self . shell , \"fields\" : [], \"parameter\" : ... } current_field = {} models = [ current_model ] parameters = [ i for i in command . split ( \" \" ) if i . strip ()] pipe_models = None ret = [ models ] # iterate over command parameters and decide if its a reference # to a model or model's field value while parameters : parameter = parameters . pop ( 0 ) # handle pipe - \"|\" if parameter == \"|\" : # check if current model has pipe defined if hasattr ( current_model [ \"model\" ], \"PicleConfig\" ) and getattr ( current_model [ \"model\" ] . PicleConfig , \"pipe\" , None ): if current_model [ \"model\" ] . PicleConfig . pipe == \"self\" : # reference pipe model to current model current_model = { \"model\" : current_model [ \"model\" ], \"fields\" : [], \"parameter\" : parameter , } else : # goto pipe model current_model = { \"model\" : current_model [ \"model\" ] . PicleConfig . pipe , \"fields\" : [], \"parameter\" : parameter , } models = [ current_model ] ret . append ( models ) else : raise SyntaxError ( f \"' { current_model [ 'model' ] } ' does not support pipe handling\" ) # collect single quoted field value elif '\"' in parameter and current_field : value_items = [ parameter . replace ( '\"' , \"\" )] # collect further values if first parameter not double quoted value e.g. \"nrp1\" if parameter . count ( '\"' ) != 2 : while parameters : parameter = parameters . pop ( 0 ) value_items . append ( parameter . replace ( '\"' , \"\" )) if '\"' in parameter : break value = \" \" . join ( value_items ) # form value string self . _save_collected_value ( current_field , value ) # handle reference to model elif current_model [ \"model\" ] . model_fields . get ( parameter ) or any ( parameter == f . alias for f in current_model [ \"model\" ] . model_fields . values () ): # source field by name if current_model [ \"model\" ] . model_fields . get ( parameter ): field = current_model [ \"model\" ] . model_fields [ parameter ] else : # source field by alias for f_name , field in current_model [ \"model\" ] . model_fields . items (): if parameter == field . alias : parameter = f_name # use actual field name break # handle next level model reference if isinstance ( field . annotation , ModelMetaclass ): # goto next model current_model = { \"model\" : field . annotation , \"fields\" : [], \"parameter\" : parameter , } models . append ( current_model ) current_field = {} # empty current field # extract default values from the current model if add_default_values : for f_name , f_value in current_model [ \"model\" ] . model_fields . items (): # skip references to other models if not isinstance ( f_value , FieldInfo ): continue # skip references to callables if f_value . annotation is Callable : continue # add field default value if f_value . get_default () is not None : current_model [ \"fields\" ] . append ( { \"name\" : f_name , \"values\" : f_value . get_default ()} ) # handle actual field reference elif isinstance ( field , FieldInfo ): # check need to record field presence before going to next field if ( current_field . get ( \"values\" ) is ... and current_field [ \"field\" ] . json_schema_extra is not None and \"presence\" in current_field [ \"field\" ] . json_schema_extra ): value = current_field [ \"field\" ] . json_schema_extra [ \"presence\" ] self . _save_collected_value ( current_field , value ) # goto next field current_field = { \"name\" : parameter , \"values\" : ... , \"field\" : field } # find and replace default value if present for index , field in enumerate ( current_model [ \"fields\" ]): if field [ \"name\" ] == current_field [ \"name\" ]: current_model [ \"fields\" ][ index ] = current_field break else : current_model [ \"fields\" ] . append ( current_field ) else : raise TypeError ( f \"Unsupported pydantic field type: ' { type ( field . annotation ) } ', \" f \"parameter: ' { parameter } ', command: ' { command } ', current model: \" f \"' { current_model [ 'model' ] } '\" ) # check if parameter value partially matches any of the model fields elif any ( field . startswith ( parameter ) for field in current_model [ \"model\" ] . model_fields ): raise FieldLooseMatchOnly ( current_model , parameter ) # parameter is a value, save it to current model elif current_field : self . _save_collected_value ( current_field , parameter ) else : raise FieldKeyError ( current_model , parameter ) # check presence for last parameter if ( current_field . get ( \"values\" ) is ... and current_field [ \"field\" ] . json_schema_extra is not None and \"presence\" in current_field [ \"field\" ] . json_schema_extra ): value = current_field [ \"field\" ] . json_schema_extra [ \"presence\" ] self . _save_collected_value ( current_field , value ) # validated collected values if validate : self . _validate_values ( models ) return ret","title":"parse_command()"},{"location":"api_reference/#picle.picle.App.print_model_help","text":"Function to form and print help message for model fields. Parameters: match ( str ) \u2013 only collect help for fields that start with match string Source code in picle\\picle.py 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 def print_model_help ( self , models : list , verbose : bool = False , match : str = None ) -> None : \"\"\" Function to form and print help message for model fields. :param match: only collect help for fields that start with ``match`` string \"\"\" model = models [ - 1 ][ - 1 ] # get last model last_field = model [ \"fields\" ][ - 1 ] if model [ \"fields\" ] else None lines = {} # dict of {cmd: cmd_help} width = 0 # record longest command width for padding # print help message only for last collected field if last_field and last_field [ \"values\" ] == ... : field = model [ \"model\" ] . model_fields [ last_field [ \"name\" ]] name = f \"<' { last_field [ 'name' ] } ' value>\" # check if field is callable if field . annotation is Callable : name = \"<ENTER>\" lines [ name ] = \"Execute command\" width = max ( width , len ( name )) # add options for enumerations elif isinstance ( field . annotation , enum . EnumMeta ): options = [ i . value for i in field . annotation ] lines [ name ] = \", \" . join ( options ) # check if model has method to source field choices elif hasattr ( model [ \"model\" ], f \"source_ { last_field [ 'name' ] } \" ): options = getattr ( model [ \"model\" ], f \"source_ { last_field [ 'name' ] } \" )() lines [ name ] = \", \" . join ( options ) else : lines [ name ] = f \" { field . description } \" if verbose : lines [ name ] += ( f \"; default ' { field . get_default () } ', type ' { str ( field . annotation ) } ', \" f \"is required - { field . is_required () } \" ) # collect help message for all fields of this model else : # check if model supports subshell if ( hasattr ( model [ \"model\" ], \"PicleConfig\" ) and getattr ( model [ \"model\" ] . PicleConfig , \"subshell\" , None ) is True # exclude <ENTER> if already in model's shell and not self . shells [ - 1 ] == model [ \"model\" ] ): name = \"<ENTER>\" lines [ name ] = \"Enter command subshell\" width = max ( width , len ( name )) # iterate over model fields for name , field in model [ \"model\" ] . model_fields . items (): # check if field has alias if field . alias : name = field . alias # skip fields that already have values if any ( f [ \"name\" ] == name for f in model [ \"fields\" ]): continue # filter fields if match and not name . startswith ( match ): continue lines [ name ] = f \" { field . description } \" if verbose : lines [ name ] += ( f \"; default ' { field . get_default () } ', type ' { str ( field . annotation ) } ', \" f \"is required - { field . is_required () } \" ) width = max ( width , len ( name )) # check if model has pipe defined if hasattr ( model [ \"model\" ], \"PicleConfig\" ) and getattr ( model [ \"model\" ] . PicleConfig , \"pipe\" , None ): name = \"|\" lines [ name ] = \"Execute pipe command\" width = max ( width , len ( name )) width = max ( width , len ( name )) # form help lines help_msg = [] for k in sorted ( lines . keys ()): padding = \" \" * ( width - len ( k )) + ( \" \" * 4 ) help_msg . append ( f \" { k }{ padding }{ lines [ k ] } \" ) # print help message self . write ( self . newline . join ( help_msg ))","title":"print_model_help()"},{"location":"api_reference/#picle.picle.App.write","text":"Method to write output to stdout Parameters: text ( str ) \u2013 text output Source code in picle\\picle.py 87 88 89 90 91 92 93 94 95 96 97 98 def write ( self , text : str ) -> None : \"\"\" Method to write output to stdout :param text: text output \"\"\" if not isinstance ( text , str ): text = str ( text ) if not text . endswith ( self . newline ): self . stdout . write ( text + self . newline ) else : self . stdout . write ( text )","title":"write()"},{"location":"api_reference/#picleconfig","text":"Each Pydantic model can have PicleConfig subclass defined with model configuration parameters: ruler - The character used to draw separator lines under the help-message headers. If empty, no ruler line is drawn, defaults is empty intro - A string to issue as an intro or banner prompt - command line shell prompt newline - newline character to use while printing output, default is \\r\\n completekey - is the readline name of a completion key, defaults to tab pipe - reference to Pydantic model class to use with | (pipe) to process the results with various functions, special value pipe = \"self\" instruct to use current model for piping results through. processors - list of functions to run results of first command through one by one outputter - function to output results, by default results written to stdout Sample PicleConfig definition: from picle.models import PipeFunctionsModel, Formatters, Outputters class ShellModel(BaseModel): \"\"\" define command attributes here \"\"\" <...> class PicleConfig: prompt = \"picle#\" ruler = \"\" intro = \"PICLE Sample app\" newline = \"\\r\\n\" completekey = \"tab\" pipe = PipeFunctionsModel processors = [Formatters.formatter_json] outputter = Outputters.outputter_rich_print","title":"PicleConfig"},{"location":"api_reference/#field-json_schema_extra","text":"PICLE supports reading additional parameters from model Field's json_schema_extra definition to control PICLE behavior. json_schema_extra PICLE parameters: function - refers to @staticmethod of the model to call with command arguments presence - command argument set to presence value if command given processors - list of functions to run results of each command through one by one outputter - function to output results, by default results written to stdout, Field's outputter overrides PicleConfig's outputter","title":"Field json_schema_extra"},{"location":"api_reference/#field-processors","text":"Processors allow to pass command execution results through a list of arbitrary functions. Results returned by processor function passed on as input to next processor function in the list and so on. In example below results returned by produce_structured_data function passed through pprint formatter Formatters.formatter_pprint function to produce pretty formatted string. from picle.models import Formatters class model_show(BaseModel): data_pprint: Callable = Field( \"produce_structured_data\", description=\"Show data using pprint formatter\", json_schema_extra={ \"processors\": [ Formatters.formatter_pprint ] } ) @staticmethod def produce_structured_data(): return {\"some\": {\"dictionary\": {\"data\": None}}, \"more\": {\"dictionary\": [\"data\"]}, \"even\": {\"more\": {\"dictionary\": \"data\"}}}","title":"Field processors"},{"location":"api_reference/#picle-build-in-models","text":"","title":"PICLE Build In Models"},{"location":"api_reference/#picle.models.Filters","text":"Bases: BaseModel","title":"Filters"},{"location":"api_reference/#picle.models.Filters.filter_exclude","text":"Filter data line by line using provided pattern. Returns only lines that does not contains requested exclude pattern. Parameters: data ( Any ) \u2013 data to filter exclude ( Any ) \u2013 pattern to filter data Source code in picle\\models.py 49 50 51 52 53 54 55 56 57 58 59 60 61 @staticmethod def filter_exclude ( data : Any , exclude : Any = None ) -> str : \"\"\" Filter data line by line using provided pattern. Returns only lines that does not contains requested ``exclude`` pattern. :param data: data to filter :param exclude: pattern to filter data \"\"\" exclude = str ( exclude ) return \" \\n \" . join ( [ line for line in str ( data ) . splitlines () if exclude not in line ] )","title":"filter_exclude()"},{"location":"api_reference/#picle.models.Filters.filter_include","text":"Filter data line by line using provided pattern. Returns only lines that contains requested include pattern. Parameters: data ( Any ) \u2013 data to filter include ( Any ) \u2013 pattern to filter data Source code in picle\\models.py 37 38 39 40 41 42 43 44 45 46 47 @staticmethod def filter_include ( data : Any , include : Any = None ) -> str : \"\"\" Filter data line by line using provided pattern. Returns only lines that contains requested ``include`` pattern. :param data: data to filter :param include: pattern to filter data \"\"\" include = str ( include ) return \" \\n \" . join ([ line for line in str ( data ) . splitlines () if include in line ])","title":"filter_include()"},{"location":"api_reference/#picle.models.Formatters","text":"Bases: BaseModel","title":"Formatters"},{"location":"api_reference/#picle.models.Formatters.formatter_json","text":"Function to transform results into JSON string Parameters: data ( Any ) \u2013 any data to convert Source code in picle\\models.py 91 92 93 94 95 96 97 98 @staticmethod def formatter_json ( data : Any ) -> str : \"\"\" Function to transform results into JSON string :param data: any data to convert \"\"\" return json . dumps ( data , indent = 4 , sort_keys = True )","title":"formatter_json()"},{"location":"api_reference/#picle.models.Formatters.formatter_pprint","text":"Function to pretty print results using python pprint module Parameters: data ( Any ) \u2013 any data to pretty print Source code in picle\\models.py 82 83 84 85 86 87 88 89 @staticmethod def formatter_pprint ( data : Any ) -> str : \"\"\" Function to pretty print results using python ``pprint`` module :param data: any data to pretty print \"\"\" return pprint . pformat ( data , indent = 4 )","title":"formatter_pprint()"},{"location":"api_reference/#picle.models.Formatters.formatter_yaml","text":"Function to transform results into YAML string Parameters: data ( Any ) \u2013 any data to convert Source code in picle\\models.py 100 101 102 103 104 105 106 107 108 109 110 @staticmethod def formatter_yaml ( data : Any ) -> str : \"\"\" Function to transform results into YAML string :param data: any data to convert \"\"\" if HAS_YAML : return yaml_dump ( data , default_flow_style = False ) else : return data","title":"formatter_yaml()"},{"location":"api_reference/#picle.models.Outputters","text":"Bases: BaseModel","title":"Outputters"},{"location":"api_reference/#picle.models.Outputters.outputter_rich_json","text":"Function to pretty print JSON string using Rich library Parameters: data ( Union [ dict , list ] ) \u2013 any data to print Source code in picle\\models.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 @staticmethod def outputter_rich_json ( data : Union [ dict , list ]) -> None : \"\"\" Function to pretty print JSON string using Rich library :param data: any data to print \"\"\" if isinstance ( data , bytes ): data = data . decode ( \"utf-8\" ) if not isinstance ( data , str ): data = json . dumps ( data ) # data should be a json string try : if HAS_RICH : RICHCONSOLE . print_json ( data , sort_keys = True , indent = 4 ) else : print ( data ) except Exception as e : print ( f \"ERROR: Data is not a valid JSON string: ' { data } ', error: ' { e } '\" )","title":"outputter_rich_json()"},{"location":"api_reference/#picle.models.Outputters.outputter_rich_print","text":"Function to pretty print output using Rich library Parameters: data ( Any ) \u2013 any data to print Source code in picle\\models.py 147 148 149 150 151 152 153 154 155 156 157 @staticmethod def outputter_rich_print ( data : Any ) -> None : \"\"\" Function to pretty print output using Rich library :param data: any data to print \"\"\" if HAS_RICH : RICHCONSOLE . print ( data ) else : print ( data )","title":"outputter_rich_print()"},{"location":"api_reference/#picle.models.PipeFunctionsModel","text":"Bases: Filters , Formatters , Outputters Collection of common pipe functions to use in PICLE shell models","title":"PipeFunctionsModel"}]}