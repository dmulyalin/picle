{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PICLE - Python Interactive Command Line Shells PICLE is a module to construct interactive command line shell applications. PICLE build on top of Python standart library CMD module and uses Pydantic models to construct shell environments.","title":"Overview"},{"location":"#picle-python-interactive-command-line-shells","text":"PICLE is a module to construct interactive command line shell applications. PICLE build on top of Python standart library CMD module and uses Pydantic models to construct shell environments.","title":"PICLE - Python Interactive Command Line Shells"},{"location":"api_reference/","text":"picle . App ( root ) Bases: cmd . Cmd PICLE App class to construct shell. Parameters: root \u2013 Root/Top Pydantic model Source code in picle\\picle.py 43 44 45 46 47 48 49 50 51 52 53 def __init__ ( self , root ): self . root = root self . shell = self . root . construct () self . ruler = self . shell . PicleConfig . ruler self . intro = self . shell . PicleConfig . intro self . prompt = self . shell . PicleConfig . prompt self . newline = self . shell . PicleConfig . newline self . completekey = self . shell . PicleConfig . completekey self . shells = [ self . shell ] super ( App , self ) . __init__ () picle . picle . App . _save_collected_value ( field : dict , value : str ) -> None Helper function to save collected value into field values Parameters: field ( dict ) \u2013 field dictionary value ( str ) \u2013 value to save string Source code in picle\\picle.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def _save_collected_value ( self , field : dict , value : str ) -> None : \"\"\" Helper function to save collected value into field values :param field: field dictionary :param value: value to save string \"\"\" # attempt to mutate value if value . title () == \"False\" : # convert value to boolean value = False elif value . title () == \"True\" : value = True elif value . title () == \"None\" : value = None elif value . isdigit (): # convert to integer value = int ( value ) elif \".\" in value : # convert to float try : value = float ( value ) except ValueError : pass # save single value if field [ \"values\" ] == ... : field [ \"values\" ] = value # add further values elif isinstance ( field [ \"values\" ], list ): field [ \"values\" ] . append ( value ) # transform values to a list if one value already collected else : field [ \"values\" ] = [ field . pop ( \"values\" ), value ] picle . picle . App . _validate_values ( models : list ) -> None Method to validate current model field values Source code in picle\\picle.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def _validate_values ( self , models : list ) -> None : \"\"\" Method to validate current model field values \"\"\" data = {} for model in reversed ( models [ 1 :]): kwargs = { f [ \"name\" ]: f [ \"values\" ] for f in model [ \"fields\" ] if f [ \"values\" ] is not ... } data = { model [ \"parameter\" ]: { ** data , ** kwargs }} log . debug ( f \"Validating collected data against root model, data: { data } \" ) # validate against root model if len ( self . shells ) == 1 : self . root ( ** data ) # validate against current shell model else : self . shell ( ** data ) picle . picle . App . completedefault ( text , line , begidx , endidx ) This method called for every command parameter on complete key hit except for the very first one. Source code in picle\\picle.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 def completedefault ( self , text , line , begidx , endidx ): \"\"\" This method called for every command parameter on complete key hit except for the very first one. \"\"\" fieldnames = [] try : command_models = self . parse_command ( line ) # check if need to exctract enum values last_model = command_models [ - 1 ][ \"model\" ] last_field_name = command_models [ - 1 ][ \"fields\" ][ - 1 ][ \"name\" ] last_field = last_model . __fields__ [ last_field_name ] last_field_value = command_models [ - 1 ][ \"fields\" ][ - 1 ][ \"values\" ] if isinstance ( last_field_value , list ): last_field_value = last_field_value [ - 1 ] elif last_field_value == ... : last_field_value = \"\" if isinstance ( last_field . type_ , enum . EnumMeta ): fieldnames = [ i . value for i in last_field . type_ if i . value . startswith ( last_field_value ) ] except FieldLooseMatchOnly as e : model , parameter = e . args fieldnames = [ f . name for f in model [ \"model\" ] . __fields__ . values () # skip fields with already collected values from complete prompt if f . name . startswith ( parameter ) and not any ( True for collected_field in model [ \"fields\" ] if collected_field [ \"name\" ] == f . name and collected_field [ \"values\" ] is not ... ) ] except Exception as e : print ( \" \\n \" , e ) return fieldnames picle . picle . App . completenames ( text , line , begidx , endidx ) This method only called for the very first command parameter on complete key hit. Source code in picle\\picle.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def completenames ( self , text , line , begidx , endidx ): \"\"\" This method only called for the very first command parameter on complete key hit. \"\"\" fieldnames = [] # collect global methods for method_name in dir ( self ): if method_name . startswith ( \"do_\" ): name = method_name . replace ( \"do_\" , \"\" ) if name . startswith ( line ): fieldnames . append ( name ) # collect model arguments try : command_models = self . parse_command ( line ) # collect arguments that startswith last parameter except FieldLooseMatchOnly as e : model , parameter = e . args for f in model [ \"model\" ] . __fields__ . values (): if f . name . startswith ( parameter ): fieldnames . append ( f . name ) # raised if no model fields matched last parameter except FieldKeyError as e : pass return fieldnames picle . picle . App . default ( line : str ) Method called if no do_xyz methods found Source code in picle\\picle.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 def default ( self , line : str ): \"\"\"Method called if no do_xyz methods found\"\"\" ret = False # print help for given command or commands if line . strip () . endswith ( \"?\" ): command_models = self . parse_command ( line . strip () . rstrip ( \"?\" )) self . print_model_help ( command_models [ - 1 ], verbose = True if line . strip () . endswith ( \"??\" ) else False , ) else : try : command_models = self . parse_command ( line , validate = True ) except FieldLooseMatchOnly as e : model , parameter = e . args # filter fields to return message for fields = [ f . name for f in model [ \"model\" ] . __fields__ . values () if f . name . startswith ( parameter ) ] print ( f \"Incomplete command, possible completions: \" f \" { ', ' . join ( fields ) } \" ) except FieldKeyError as e : model , parameter = e . args model_name = ( model [ \"model\" ] . __name__ if hasattr ( model [ \"model\" ], \"__name__\" ) else model [ \"model\" ] . __repr_name__ () ) print ( f \"Incorrect command, ' { parameter } ' not part of ' { model_name } ' model's fields\" ) except ValidationError as e : print ( e ) else : # collect arguments run_kwargs = { f [ \"name\" ]: f [ \"values\" ] for model in command_models for f in model [ \"fields\" ] if f [ \"values\" ] is not ... } # run model function model = command_models [ - 1 ][ \"model\" ] if hasattr ( model , \"run\" ): ret = model . run ( ** run_kwargs ) # check if model has subshell elif ( hasattr ( model , \"PicleConfig\" ) and getattr ( model . PicleConfig , \"subshell\" , None ) is True ): # collect parent shells for item in command_models [: - 1 ]: m = item [ \"model\" ] if ( hasattr ( m , \"PicleConfig\" ) and getattr ( m . PicleConfig , \"subshell\" , None ) is True ): if m not in self . shells : self . shells . append ( m ) # update self . prompt = getattr ( model . PicleConfig , \"prompt\" , self . prompt ) self . shell = model self . shells . append ( self . shell ) else : print ( f \"Model ' { model . __name__ } ' has no 'run' method defined\" ) # returning True will close the shell if ret is True : return True return ret picle . picle . App . do_end ( arg ) Exit application Source code in picle\\picle.py 329 330 331 def do_end ( self , arg ): \"\"\"Exit application\"\"\" return True picle . picle . App . do_exit ( arg ) Exit current shell Source code in picle\\picle.py 312 313 314 315 316 317 318 319 def do_exit ( self , arg ): \"\"\"Exit current shell\"\"\" _ = self . shells . pop ( - 1 ) if self . shells : self . shell = self . shells [ - 1 ] self . prompt = self . shell . PicleConfig . prompt else : return True picle . picle . App . do_help ( arg ) Print help message Source code in picle\\picle.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def do_help ( self , arg ): \"\"\"Print help message\"\"\" command_models = self . parse_command ( arg . strip ( \"?\" )) self . print_model_help ( command_models [ - 1 ], verbose = True if arg . strip () . endswith ( \"?\" ) else False ) # print help for global top commands if len ( arg . strip () . split ( \" \" )) == 1 : lines = {} # dict of {cmd: cmd_help} width = 0 # record longest command width for padding for method_name in dir ( self ): if method_name . startswith ( \"do_\" ): name = method_name . replace ( \"do_\" , \"\" ) lines [ name ] = getattr ( self , method_name ) . __doc__ width = max ( width , len ( name )) # form help lines if lines : help_msg = [] for k , v in lines . items (): padding = \" \" * ( width - len ( k )) + ( \" \" * 4 ) help_msg . append ( f \" { k }{ padding }{ v } \" ) # print help message print ( self . newline . join ( help_msg )) picle . picle . App . do_pwd ( arg ) Print current shell path Source code in picle\\picle.py 333 334 335 336 337 338 def do_pwd ( self , arg ): \"\"\"Print current shell path\"\"\" path = [ \"Root\" ] for shell in self . shells [ 1 :]: path . append ( shell . __name__ ) print ( \"->\" . join ( path )) picle . picle . App . do_top ( arg ) Exit to top shell Source code in picle\\picle.py 321 322 323 324 325 326 327 def do_top ( self , arg ): \"\"\"Exit to top shell\"\"\" self . shell = self . shells [ 0 ] self . prompt = self . shell . PicleConfig . prompt while self . shells : _ = self . shells . pop () self . shells . append ( self . shell ) picle . picle . App . parse_command ( command : str , validate : bool = False ) -> list Function to parse command string and construct a list of model references and fields values. Parameters: command ( str ) \u2013 command string Source code in picle\\picle.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def parse_command ( self , command : str , validate : bool = False ) -> list : \"\"\" Function to parse command string and construct a list of model references and fields values. :param command: command string \"\"\" current_model = { \"model\" : self . shell , \"fields\" : [], \"parameter\" : ... } current_field = {} models = [ current_model ] parameters = [ i for i in command . split ( \" \" ) if i . strip ()] # iterate over command parameters and decide if its a reference # to a model or model's field value while parameters : parameter = parameters . pop ( 0 ) # collect single quoted field value if '\"' in parameter and current_field : value_items = [ parameter . replace ( '\"' , \"\" )] # collect further values if first parameter not double quoted value e.g. \"nrp1\" if parameter . count ( '\"' ) != 2 : while parameters : parameter = parameters . pop ( 0 ) value_items . append ( parameter . replace ( '\"' , \"\" )) if '\"' in parameter : break value = \" \" . join ( value_items ) # form value string self . _save_collected_value ( current_field , value ) # handle reference to model elif current_model [ \"model\" ] . __fields__ . get ( parameter ): field = current_model [ \"model\" ] . __fields__ [ parameter ] # handle next level model reference if isinstance ( field . type_ , ModelMetaclass ): current_model = { \"model\" : field . type_ , \"fields\" : [], \"parameter\" : parameter , } models . append ( current_model ) current_field = {} # empty current field # handle field value elif isinstance ( field , ModelField ): current_field = { \"name\" : parameter , \"values\" : ... } current_model [ \"fields\" ] . append ( current_field ) else : raise TypeError ( f \"Unsupported pydantic field type: ' { type ( field . type_ ) } ', \" f \"parameter: ' { parameter } ', command: ' { command } ', current model: \" f \"' { current_model [ 'model' ] } '\" ) # check if parameter value partially matches any of the model fields elif any ( field . startswith ( parameter ) for field in current_model [ \"model\" ] . __fields__ ): raise FieldLooseMatchOnly ( current_model , parameter ) # parameter is a value, save it to current model elif current_field : self . _save_collected_value ( current_field , parameter ) else : raise FieldKeyError ( current_model , parameter ) # validated collected values if validate : self . _validate_values ( models ) return models picle . picle . App . print_model_help ( model : dict , verbose : bool = False ) -> None Function to form and print help message for model fields. Source code in picle\\picle.py 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 def print_model_help ( self , model : dict , verbose : bool = False ) -> None : \"\"\" Function to form and print help message for model fields. \"\"\" last_field = model [ \"fields\" ][ - 1 ] if model [ \"fields\" ] else None lines = {} # dict of {cmd: cmd_help} width = 0 # record longest command width for padding # print help message only for last collected field if last_field and last_field [ \"values\" ] == ... : field = model [ \"model\" ] . __fields__ [ last_field [ \"name\" ]] name = f \"< { last_field [ 'name' ] } value>\" # add options for enumerations if isinstance ( field . type_ , enum . EnumMeta ): options = [ i . value for i in field . type_ ] lines [ name ] = \", \" . join ( options ) else : lines [ name ] = f \" { field . field_info . description } \" if verbose : lines [ name ] += ( f \"; default ' { field . get_default () } ', type ' { field . _type_display () } ', \" f \"required { field . required } \" ) width = max ( width , len ( name )) # collect help message for all fields of this model else : for name , field in model [ \"model\" ] . __fields__ . items (): # skip fields that already have values if any ( f [ \"name\" ] == name for f in model [ \"fields\" ]): continue lines [ name ] = f \" { field . field_info . description } \" if verbose : lines [ name ] += ( f \"; default ' { field . get_default () } ', type ' { field . _type_display () } ', \" f \"required { field . required } \" ) width = max ( width , len ( name )) # form help lines help_msg = [] for k , v in lines . items (): padding = \" \" * ( width - len ( k )) + ( \" \" * 4 ) help_msg . append ( f \" { k }{ padding }{ v } \" ) # print help message print ( self . newline . join ( help_msg ))","title":"API Reference"},{"location":"api_reference/#picle.App","text":"Bases: cmd . Cmd PICLE App class to construct shell. Parameters: root \u2013 Root/Top Pydantic model Source code in picle\\picle.py 43 44 45 46 47 48 49 50 51 52 53 def __init__ ( self , root ): self . root = root self . shell = self . root . construct () self . ruler = self . shell . PicleConfig . ruler self . intro = self . shell . PicleConfig . intro self . prompt = self . shell . PicleConfig . prompt self . newline = self . shell . PicleConfig . newline self . completekey = self . shell . PicleConfig . completekey self . shells = [ self . shell ] super ( App , self ) . __init__ ()","title":"App"},{"location":"api_reference/#picle.picle.App._save_collected_value","text":"Helper function to save collected value into field values Parameters: field ( dict ) \u2013 field dictionary value ( str ) \u2013 value to save string Source code in picle\\picle.py 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 def _save_collected_value ( self , field : dict , value : str ) -> None : \"\"\" Helper function to save collected value into field values :param field: field dictionary :param value: value to save string \"\"\" # attempt to mutate value if value . title () == \"False\" : # convert value to boolean value = False elif value . title () == \"True\" : value = True elif value . title () == \"None\" : value = None elif value . isdigit (): # convert to integer value = int ( value ) elif \".\" in value : # convert to float try : value = float ( value ) except ValueError : pass # save single value if field [ \"values\" ] == ... : field [ \"values\" ] = value # add further values elif isinstance ( field [ \"values\" ], list ): field [ \"values\" ] . append ( value ) # transform values to a list if one value already collected else : field [ \"values\" ] = [ field . pop ( \"values\" ), value ]","title":"_save_collected_value()"},{"location":"api_reference/#picle.picle.App._validate_values","text":"Method to validate current model field values Source code in picle\\picle.py 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 def _validate_values ( self , models : list ) -> None : \"\"\" Method to validate current model field values \"\"\" data = {} for model in reversed ( models [ 1 :]): kwargs = { f [ \"name\" ]: f [ \"values\" ] for f in model [ \"fields\" ] if f [ \"values\" ] is not ... } data = { model [ \"parameter\" ]: { ** data , ** kwargs }} log . debug ( f \"Validating collected data against root model, data: { data } \" ) # validate against root model if len ( self . shells ) == 1 : self . root ( ** data ) # validate against current shell model else : self . shell ( ** data )","title":"_validate_values()"},{"location":"api_reference/#picle.picle.App.completedefault","text":"This method called for every command parameter on complete key hit except for the very first one. Source code in picle\\picle.py 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 def completedefault ( self , text , line , begidx , endidx ): \"\"\" This method called for every command parameter on complete key hit except for the very first one. \"\"\" fieldnames = [] try : command_models = self . parse_command ( line ) # check if need to exctract enum values last_model = command_models [ - 1 ][ \"model\" ] last_field_name = command_models [ - 1 ][ \"fields\" ][ - 1 ][ \"name\" ] last_field = last_model . __fields__ [ last_field_name ] last_field_value = command_models [ - 1 ][ \"fields\" ][ - 1 ][ \"values\" ] if isinstance ( last_field_value , list ): last_field_value = last_field_value [ - 1 ] elif last_field_value == ... : last_field_value = \"\" if isinstance ( last_field . type_ , enum . EnumMeta ): fieldnames = [ i . value for i in last_field . type_ if i . value . startswith ( last_field_value ) ] except FieldLooseMatchOnly as e : model , parameter = e . args fieldnames = [ f . name for f in model [ \"model\" ] . __fields__ . values () # skip fields with already collected values from complete prompt if f . name . startswith ( parameter ) and not any ( True for collected_field in model [ \"fields\" ] if collected_field [ \"name\" ] == f . name and collected_field [ \"values\" ] is not ... ) ] except Exception as e : print ( \" \\n \" , e ) return fieldnames","title":"completedefault()"},{"location":"api_reference/#picle.picle.App.completenames","text":"This method only called for the very first command parameter on complete key hit. Source code in picle\\picle.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 def completenames ( self , text , line , begidx , endidx ): \"\"\" This method only called for the very first command parameter on complete key hit. \"\"\" fieldnames = [] # collect global methods for method_name in dir ( self ): if method_name . startswith ( \"do_\" ): name = method_name . replace ( \"do_\" , \"\" ) if name . startswith ( line ): fieldnames . append ( name ) # collect model arguments try : command_models = self . parse_command ( line ) # collect arguments that startswith last parameter except FieldLooseMatchOnly as e : model , parameter = e . args for f in model [ \"model\" ] . __fields__ . values (): if f . name . startswith ( parameter ): fieldnames . append ( f . name ) # raised if no model fields matched last parameter except FieldKeyError as e : pass return fieldnames","title":"completenames()"},{"location":"api_reference/#picle.picle.App.default","text":"Method called if no do_xyz methods found Source code in picle\\picle.py 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 def default ( self , line : str ): \"\"\"Method called if no do_xyz methods found\"\"\" ret = False # print help for given command or commands if line . strip () . endswith ( \"?\" ): command_models = self . parse_command ( line . strip () . rstrip ( \"?\" )) self . print_model_help ( command_models [ - 1 ], verbose = True if line . strip () . endswith ( \"??\" ) else False , ) else : try : command_models = self . parse_command ( line , validate = True ) except FieldLooseMatchOnly as e : model , parameter = e . args # filter fields to return message for fields = [ f . name for f in model [ \"model\" ] . __fields__ . values () if f . name . startswith ( parameter ) ] print ( f \"Incomplete command, possible completions: \" f \" { ', ' . join ( fields ) } \" ) except FieldKeyError as e : model , parameter = e . args model_name = ( model [ \"model\" ] . __name__ if hasattr ( model [ \"model\" ], \"__name__\" ) else model [ \"model\" ] . __repr_name__ () ) print ( f \"Incorrect command, ' { parameter } ' not part of ' { model_name } ' model's fields\" ) except ValidationError as e : print ( e ) else : # collect arguments run_kwargs = { f [ \"name\" ]: f [ \"values\" ] for model in command_models for f in model [ \"fields\" ] if f [ \"values\" ] is not ... } # run model function model = command_models [ - 1 ][ \"model\" ] if hasattr ( model , \"run\" ): ret = model . run ( ** run_kwargs ) # check if model has subshell elif ( hasattr ( model , \"PicleConfig\" ) and getattr ( model . PicleConfig , \"subshell\" , None ) is True ): # collect parent shells for item in command_models [: - 1 ]: m = item [ \"model\" ] if ( hasattr ( m , \"PicleConfig\" ) and getattr ( m . PicleConfig , \"subshell\" , None ) is True ): if m not in self . shells : self . shells . append ( m ) # update self . prompt = getattr ( model . PicleConfig , \"prompt\" , self . prompt ) self . shell = model self . shells . append ( self . shell ) else : print ( f \"Model ' { model . __name__ } ' has no 'run' method defined\" ) # returning True will close the shell if ret is True : return True return ret","title":"default()"},{"location":"api_reference/#picle.picle.App.do_end","text":"Exit application Source code in picle\\picle.py 329 330 331 def do_end ( self , arg ): \"\"\"Exit application\"\"\" return True","title":"do_end()"},{"location":"api_reference/#picle.picle.App.do_exit","text":"Exit current shell Source code in picle\\picle.py 312 313 314 315 316 317 318 319 def do_exit ( self , arg ): \"\"\"Exit current shell\"\"\" _ = self . shells . pop ( - 1 ) if self . shells : self . shell = self . shells [ - 1 ] self . prompt = self . shell . PicleConfig . prompt else : return True","title":"do_exit()"},{"location":"api_reference/#picle.picle.App.do_help","text":"Print help message Source code in picle\\picle.py 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 def do_help ( self , arg ): \"\"\"Print help message\"\"\" command_models = self . parse_command ( arg . strip ( \"?\" )) self . print_model_help ( command_models [ - 1 ], verbose = True if arg . strip () . endswith ( \"?\" ) else False ) # print help for global top commands if len ( arg . strip () . split ( \" \" )) == 1 : lines = {} # dict of {cmd: cmd_help} width = 0 # record longest command width for padding for method_name in dir ( self ): if method_name . startswith ( \"do_\" ): name = method_name . replace ( \"do_\" , \"\" ) lines [ name ] = getattr ( self , method_name ) . __doc__ width = max ( width , len ( name )) # form help lines if lines : help_msg = [] for k , v in lines . items (): padding = \" \" * ( width - len ( k )) + ( \" \" * 4 ) help_msg . append ( f \" { k }{ padding }{ v } \" ) # print help message print ( self . newline . join ( help_msg ))","title":"do_help()"},{"location":"api_reference/#picle.picle.App.do_pwd","text":"Print current shell path Source code in picle\\picle.py 333 334 335 336 337 338 def do_pwd ( self , arg ): \"\"\"Print current shell path\"\"\" path = [ \"Root\" ] for shell in self . shells [ 1 :]: path . append ( shell . __name__ ) print ( \"->\" . join ( path ))","title":"do_pwd()"},{"location":"api_reference/#picle.picle.App.do_top","text":"Exit to top shell Source code in picle\\picle.py 321 322 323 324 325 326 327 def do_top ( self , arg ): \"\"\"Exit to top shell\"\"\" self . shell = self . shells [ 0 ] self . prompt = self . shell . PicleConfig . prompt while self . shells : _ = self . shells . pop () self . shells . append ( self . shell )","title":"do_top()"},{"location":"api_reference/#picle.picle.App.parse_command","text":"Function to parse command string and construct a list of model references and fields values. Parameters: command ( str ) \u2013 command string Source code in picle\\picle.py 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 def parse_command ( self , command : str , validate : bool = False ) -> list : \"\"\" Function to parse command string and construct a list of model references and fields values. :param command: command string \"\"\" current_model = { \"model\" : self . shell , \"fields\" : [], \"parameter\" : ... } current_field = {} models = [ current_model ] parameters = [ i for i in command . split ( \" \" ) if i . strip ()] # iterate over command parameters and decide if its a reference # to a model or model's field value while parameters : parameter = parameters . pop ( 0 ) # collect single quoted field value if '\"' in parameter and current_field : value_items = [ parameter . replace ( '\"' , \"\" )] # collect further values if first parameter not double quoted value e.g. \"nrp1\" if parameter . count ( '\"' ) != 2 : while parameters : parameter = parameters . pop ( 0 ) value_items . append ( parameter . replace ( '\"' , \"\" )) if '\"' in parameter : break value = \" \" . join ( value_items ) # form value string self . _save_collected_value ( current_field , value ) # handle reference to model elif current_model [ \"model\" ] . __fields__ . get ( parameter ): field = current_model [ \"model\" ] . __fields__ [ parameter ] # handle next level model reference if isinstance ( field . type_ , ModelMetaclass ): current_model = { \"model\" : field . type_ , \"fields\" : [], \"parameter\" : parameter , } models . append ( current_model ) current_field = {} # empty current field # handle field value elif isinstance ( field , ModelField ): current_field = { \"name\" : parameter , \"values\" : ... } current_model [ \"fields\" ] . append ( current_field ) else : raise TypeError ( f \"Unsupported pydantic field type: ' { type ( field . type_ ) } ', \" f \"parameter: ' { parameter } ', command: ' { command } ', current model: \" f \"' { current_model [ 'model' ] } '\" ) # check if parameter value partially matches any of the model fields elif any ( field . startswith ( parameter ) for field in current_model [ \"model\" ] . __fields__ ): raise FieldLooseMatchOnly ( current_model , parameter ) # parameter is a value, save it to current model elif current_field : self . _save_collected_value ( current_field , parameter ) else : raise FieldKeyError ( current_model , parameter ) # validated collected values if validate : self . _validate_values ( models ) return models","title":"parse_command()"},{"location":"api_reference/#picle.picle.App.print_model_help","text":"Function to form and print help message for model fields. Source code in picle\\picle.py 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 def print_model_help ( self , model : dict , verbose : bool = False ) -> None : \"\"\" Function to form and print help message for model fields. \"\"\" last_field = model [ \"fields\" ][ - 1 ] if model [ \"fields\" ] else None lines = {} # dict of {cmd: cmd_help} width = 0 # record longest command width for padding # print help message only for last collected field if last_field and last_field [ \"values\" ] == ... : field = model [ \"model\" ] . __fields__ [ last_field [ \"name\" ]] name = f \"< { last_field [ 'name' ] } value>\" # add options for enumerations if isinstance ( field . type_ , enum . EnumMeta ): options = [ i . value for i in field . type_ ] lines [ name ] = \", \" . join ( options ) else : lines [ name ] = f \" { field . field_info . description } \" if verbose : lines [ name ] += ( f \"; default ' { field . get_default () } ', type ' { field . _type_display () } ', \" f \"required { field . required } \" ) width = max ( width , len ( name )) # collect help message for all fields of this model else : for name , field in model [ \"model\" ] . __fields__ . items (): # skip fields that already have values if any ( f [ \"name\" ] == name for f in model [ \"fields\" ]): continue lines [ name ] = f \" { field . field_info . description } \" if verbose : lines [ name ] += ( f \"; default ' { field . get_default () } ', type ' { field . _type_display () } ', \" f \"required { field . required } \" ) width = max ( width , len ( name )) # form help lines help_msg = [] for k , v in lines . items (): padding = \" \" * ( width - len ( k )) + ( \" \" * 4 ) help_msg . append ( f \" { k }{ padding }{ v } \" ) # print help message print ( self . newline . join ( help_msg ))","title":"print_model_help()"}]}